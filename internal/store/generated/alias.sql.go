// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: alias.sql

package generated

import (
	"context"
)

const addAliasForHabit = `-- name: AddAliasForHabit :exec
INSERT INTO habit_aliases (habit_id, alias)
VALUES (?, ?)
`

type AddAliasForHabitParams struct {
	HabitID int64
	Alias   string
}

func (q *Queries) AddAliasForHabit(ctx context.Context, arg AddAliasForHabitParams) error {
	_, err := q.db.ExecContext(ctx, addAliasForHabit, arg.HabitID, arg.Alias)
	return err
}

const deleteAliasForHabit = `-- name: DeleteAliasForHabit :exec
DELETE FROM habit_aliases
WHERE habit_id = ? AND alias = ?
`

type DeleteAliasForHabitParams struct {
	HabitID int64
	Alias   string
}

func (q *Queries) DeleteAliasForHabit(ctx context.Context, arg DeleteAliasForHabitParams) error {
	_, err := q.db.ExecContext(ctx, deleteAliasForHabit, arg.HabitID, arg.Alias)
	return err
}

const deleteAllAliasesForHabit = `-- name: DeleteAllAliasesForHabit :exec
DELETE FROM habit_aliases
WHERE habit_id = ?
`

func (q *Queries) DeleteAllAliasesForHabit(ctx context.Context, habitID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllAliasesForHabit, habitID)
	return err
}

const getAllAliasesForHabit = `-- name: GetAllAliasesForHabit :many
SELECT alias
FROM habit_aliases
WHERE habit_id = ?
`

func (q *Queries) GetAllAliasesForHabit(ctx context.Context, habitID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllAliasesForHabit, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var alias string
		if err := rows.Scan(&alias); err != nil {
			return nil, err
		}
		items = append(items, alias)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
