// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habits.sql

package generated

import (
	"context"
	"database/sql"
)

const addHabit = `-- name: AddHabit :one
INSERT INTO habits (name, description, habit_type, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id
`

type AddHabitParams struct {
	Name        string
	Description sql.NullString
	HabitType   string
}

func (q *Queries) AddHabit(ctx context.Context, arg AddHabitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addHabit, arg.Name, arg.Description, arg.HabitType)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits WHERE id = ?
`

func (q *Queries) DeleteHabit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, id)
	return err
}

const deleteHabitByName = `-- name: DeleteHabitByName :exec
DELETE FROM habits WHERE name = ?
`

func (q *Queries) DeleteHabitByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteHabitByName, name)
	return err
}

const getHabit = `-- name: GetHabit :one
SELECT id, name, description, habit_type, created_at, last_logged FROM habits WHERE id = ?
`

func (q *Queries) GetHabit(ctx context.Context, id int64) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabit, id)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HabitType,
		&i.CreatedAt,
		&i.LastLogged,
	)
	return i, err
}

const getHabitByAlias = `-- name: GetHabitByAlias :one
SELECT h.id, h.name, h.description, h.habit_type, h.created_at, h.last_logged
FROM habits h
JOIN habit_aliases ha ON h.id = ha.habit_id
WHERE ha.alias = ?
`

func (q *Queries) GetHabitByAlias(ctx context.Context, alias string) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabitByAlias, alias)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HabitType,
		&i.CreatedAt,
		&i.LastLogged,
	)
	return i, err
}

const getHabitByName = `-- name: GetHabitByName :one
SELECT id, name, description, habit_type, created_at, last_logged FROM habits WHERE name = ?
`

func (q *Queries) GetHabitByName(ctx context.Context, name string) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabitByName, name)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HabitType,
		&i.CreatedAt,
		&i.LastLogged,
	)
	return i, err
}

const listHabits = `-- name: ListHabits :many
SELECT id, name, description, habit_type, created_at, last_logged FROM habits
`

func (q *Queries) ListHabits(ctx context.Context) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, listHabits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HabitType,
			&i.CreatedAt,
			&i.LastLogged,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHabit = `-- name: UpdateHabit :exec
UPDATE habits SET name = ?, description = ?, habit_type = ?, last_logged = ?
WHERE id = ?
`

type UpdateHabitParams struct {
	Name        string
	Description sql.NullString
	HabitType   string
	LastLogged  sql.NullTime
	ID          int64
}

func (q *Queries) UpdateHabit(ctx context.Context, arg UpdateHabitParams) error {
	_, err := q.db.ExecContext(ctx, updateHabit,
		arg.Name,
		arg.Description,
		arg.HabitType,
		arg.LastLogged,
		arg.ID,
	)
	return err
}

const updateHabitLastLogged = `-- name: UpdateHabitLastLogged :exec
UPDATE habits SET last_logged = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateHabitLastLogged(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateHabitLastLogged, id)
	return err
}
