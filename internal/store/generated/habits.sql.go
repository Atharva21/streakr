// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: habits.sql

package generated

import (
	"context"
	"database/sql"
)

const addHabit = `-- name: AddHabit :one
INSERT INTO habits (name, description, habit_type, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id
`

type AddHabitParams struct {
	Name        string
	Description sql.NullString
	HabitType   string
}

func (q *Queries) AddHabit(ctx context.Context, arg AddHabitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addHabit, arg.Name, arg.Description, arg.HabitType)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const countImproveHabitsLoggedToday = `-- name: CountImproveHabitsLoggedToday :one
SELECT COUNT(DISTINCT h.id) as logged_today_count
FROM habits h
JOIN streaks s ON h.id = s.habit_id
WHERE h.habit_type = 'improve' 
 AND DATE(s.streak_end) = DATE('now')
`

func (q *Queries) CountImproveHabitsLoggedToday(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countImproveHabitsLoggedToday)
	var logged_today_count int64
	err := row.Scan(&logged_today_count)
	return logged_today_count, err
}

const countTotalImproveHabits = `-- name: CountTotalImproveHabits :one
SELECT COUNT(*) as total_improve_habits
FROM habits 
WHERE habit_type = 'improve'
`

func (q *Queries) CountTotalImproveHabits(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotalImproveHabits)
	var total_improve_habits int64
	err := row.Scan(&total_improve_habits)
	return total_improve_habits, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits WHERE id = ?
`

func (q *Queries) DeleteHabit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, id)
	return err
}

const deleteHabitByName = `-- name: DeleteHabitByName :exec
DELETE FROM habits WHERE name = ?
`

func (q *Queries) DeleteHabitByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteHabitByName, name)
	return err
}

const getDaysSinceHabitCreation = `-- name: GetDaysSinceHabitCreation :one
SELECT CAST(1 + julianday('now') - julianday(DATE(created_at)) AS INTEGER) as days_passed
FROM habits
WHERE id = ?
`

func (q *Queries) GetDaysSinceHabitCreation(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDaysSinceHabitCreation, id)
	var days_passed int64
	err := row.Scan(&days_passed)
	return days_passed, err
}

const getHabit = `-- name: GetHabit :one
SELECT id, name, description, habit_type, created_at FROM habits WHERE id = ?
`

func (q *Queries) GetHabit(ctx context.Context, id int64) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabit, id)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HabitType,
		&i.CreatedAt,
	)
	return i, err
}

const getHabitByName = `-- name: GetHabitByName :one
SELECT id, name, description, habit_type, created_at FROM habits WHERE name = ?
`

func (q *Queries) GetHabitByName(ctx context.Context, name string) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabitByName, name)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.HabitType,
		&i.CreatedAt,
	)
	return i, err
}

const listHabits = `-- name: ListHabits :many
SELECT id, name, description, habit_type, created_at FROM habits
`

func (q *Queries) ListHabits(ctx context.Context) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, listHabits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HabitType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
