// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: streaks.sql

package generated

import (
	"context"
	"time"
)

const addStreak = `-- name: AddStreak :one
INSERT INTO streaks (habit_id, streak_start, streak_end)
VALUES (?, ?, ?)
RETURNING id
`

type AddStreakParams struct {
	HabitID     int64
	StreakStart time.Time
	StreakEnd   time.Time
}

func (q *Queries) AddStreak(ctx context.Context, arg AddStreakParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addStreak, arg.HabitID, arg.StreakStart, arg.StreakEnd)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAllStreaksForHabit = `-- name: DeleteAllStreaksForHabit :exec
DELETE FROM streaks
WHERE habit_id = ?
`

func (q *Queries) DeleteAllStreaksForHabit(ctx context.Context, habitID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllStreaksForHabit, habitID)
	return err
}

const deleteStreakByID = `-- name: DeleteStreakByID :exec
DELETE FROM streaks
WHERE id = ?
`

func (q *Queries) DeleteStreakByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStreakByID, id)
	return err
}

const getAllStreaksForHabit = `-- name: GetAllStreaksForHabit :many
SELECT id, habit_id, streak_start, streak_end,
       julianday(streak_end) - julianday(streak_start) + 1 as streak_days
FROM streaks
WHERE habit_id = ?
ORDER BY streak_start DESC
`

type GetAllStreaksForHabitRow struct {
	ID          int64
	HabitID     int64
	StreakStart time.Time
	StreakEnd   time.Time
	StreakDays  int64
}

func (q *Queries) GetAllStreaksForHabit(ctx context.Context, habitID int64) ([]GetAllStreaksForHabitRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllStreaksForHabit, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStreaksForHabitRow
	for rows.Next() {
		var i GetAllStreaksForHabitRow
		if err := rows.Scan(
			&i.ID,
			&i.HabitID,
			&i.StreakStart,
			&i.StreakEnd,
			&i.StreakDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestStreak = `-- name: GetLatestStreak :one
SELECT id, habit_id, streak_start, streak_end
FROM streaks
ORDER BY streak_end DESC
LIMIT 1
`

func (q *Queries) GetLatestStreak(ctx context.Context) (Streak, error) {
	row := q.db.QueryRowContext(ctx, getLatestStreak)
	var i Streak
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.StreakStart,
		&i.StreakEnd,
	)
	return i, err
}

const getLatestStreakForHabit = `-- name: GetLatestStreakForHabit :one
SELECT id, habit_id, streak_start, streak_end
FROM streaks
WHERE habit_id = ?
ORDER BY streak_end DESC
LIMIT 1
`

func (q *Queries) GetLatestStreakForHabit(ctx context.Context, habitID int64) (Streak, error) {
	row := q.db.QueryRowContext(ctx, getLatestStreakForHabit, habitID)
	var i Streak
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.StreakStart,
		&i.StreakEnd,
	)
	return i, err
}

const getMaxStreak = `-- name: GetMaxStreak :one
SELECT MAX(julianday(streak_end) - julianday(streak_start) + 1) as max_streak_days
FROM streaks
`

func (q *Queries) GetMaxStreak(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxStreak)
	var max_streak_days interface{}
	err := row.Scan(&max_streak_days)
	return max_streak_days, err
}

const getMaxStreakForHabit = `-- name: GetMaxStreakForHabit :one
SELECT MAX(julianday(streak_end) - julianday(streak_start) + 1) as max_streak_days
FROM streaks
WHERE habit_id = ?
`

func (q *Queries) GetMaxStreakForHabit(ctx context.Context, habitID int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxStreakForHabit, habitID)
	var max_streak_days interface{}
	err := row.Scan(&max_streak_days)
	return max_streak_days, err
}

const updateStreakEnd = `-- name: UpdateStreakEnd :exec
UPDATE streaks
SET streak_end = ?
WHERE id = ?
`

type UpdateStreakEndParams struct {
	StreakEnd time.Time
	ID        int64
}

func (q *Queries) UpdateStreakEnd(ctx context.Context, arg UpdateStreakEndParams) error {
	_, err := q.db.ExecContext(ctx, updateStreakEnd, arg.StreakEnd, arg.ID)
	return err
}
